
WDG_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000436  000004ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  000004d6  2**0
                  ALLOC
  3 .stab         00001020  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c83  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e3       	ldi	r30, 0x36	; 54
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "WDGM.h"
#include "Timer.h"
#include <util/delay.h>


int main() {
  a6:	ef 92       	push	r14
  a8:	ff 92       	push	r15
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29

	Gpio_Init();
  b2:	0e 94 b8 01 	call	0x370	; 0x370 <Gpio_Init>
	LED_Init();
  b6:	0e 94 36 01 	call	0x26c	; 0x26c <LED_Init>
	WDGDrv_Init();
  ba:	0e 94 a8 00 	call	0x150	; 0x150 <WDGDrv_Init>
	WDGM_Init();
  be:	0e 94 76 00 	call	0xec	; 0xec <WDGM_Init>
	Timer_Init();
  c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <Timer_Init>
  c6:	c0 e0       	ldi	r28, 0x00	; 0
  c8:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	04 ec       	ldi	r16, 0xC4	; 196
  cc:	19 e0       	ldi	r17, 0x09	; 9


		wdgm_counter += 10;
		if (wdgm_counter >= 20) {
			wdgm_counter = 0;
			WDGM_MainFunction();
  ce:	ee 24       	eor	r14, r14
  d0:	ff 24       	eor	r15, r15
  d2:	c8 01       	movw	r24, r16
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x2e>
	unsigned int wdgm_counter = 0;


	while (1) {
		_delay_ms(10);
		LED_Manage();
  d8:	0e 94 75 01 	call	0x2ea	; 0x2ea <LED_Manage>


		wdgm_counter += 10;
  dc:	2a 96       	adiw	r28, 0x0a	; 10
		if (wdgm_counter >= 20) {
  de:	c4 31       	cpi	r28, 0x14	; 20
  e0:	d1 05       	cpc	r29, r1
  e2:	b8 f3       	brcs	.-18     	; 0xd2 <main+0x2c>
			wdgm_counter = 0;
			WDGM_MainFunction();
  e4:	0e 94 7e 00 	call	0xfc	; 0xfc <WDGM_MainFunction>
  e8:	e7 01       	movw	r28, r14
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x2c>

000000ec <WDGM_Init>:
volatile uint8 wdgm_mainfunction_executed;// = 0;



void WDGM_Init(void) {
    ledm_call_count = 0;
  ec:	10 92 0c 01 	sts	0x010C, r1
    status = NOK;
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	80 93 1a 01 	sts	0x011A, r24
    wdgm_mainfunction_executed = 0;
  f6:	10 92 19 01 	sts	0x0119, r1
}
  fa:	08 95       	ret

000000fc <WDGM_MainFunction>:

void WDGM_MainFunction(void) {
//	static unsigned int check_counter = 0;
	//Gpio_Write(2, 1);

    check_counter += 20; // Called every 20ms
  fc:	80 91 0d 01 	lds	r24, 0x010D
 100:	90 91 0e 01 	lds	r25, 0x010E
 104:	44 96       	adiw	r24, 0x14	; 20
 106:	90 93 0e 01 	sts	0x010E, r25
 10a:	80 93 0d 01 	sts	0x010D, r24

    if (check_counter >= 100) { // 100ms period
 10e:	84 36       	cpi	r24, 0x64	; 100
 110:	91 05       	cpc	r25, r1
 112:	a0 f0       	brcs	.+40     	; 0x13c <WDGM_MainFunction+0x40>
    	check_counter = 0;
 114:	10 92 0e 01 	sts	0x010E, r1
 118:	10 92 0d 01 	sts	0x010D, r1
        if (ledm_call_count >= 8 && ledm_call_count <= 12) {
 11c:	80 91 0c 01 	lds	r24, 0x010C
 120:	88 50       	subi	r24, 0x08	; 8
 122:	85 30       	cpi	r24, 0x05	; 5
 124:	18 f4       	brcc	.+6      	; 0x12c <WDGM_MainFunction+0x30>
            status = OK;
 126:	10 92 1a 01 	sts	0x011A, r1
 12a:	03 c0       	rjmp	.+6      	; 0x132 <WDGM_MainFunction+0x36>
        } else {
            status = NOK;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	80 93 1a 01 	sts	0x011A, r24
        }
        // set the wdgm_mainfunction_executed with 1 bec it is not stuck
        wdgm_mainfunction_executed = 1;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 19 01 	sts	0x0119, r24
        ledm_call_count = 0;
 138:	10 92 0c 01 	sts	0x010C, r1
 13c:	08 95       	ret

0000013e <WDGM_PovideSuppervisionStatus>:



WDGM_StatusType WDGM_PovideSuppervisionStatus(void) {
	return status;
}
 13e:	80 91 1a 01 	lds	r24, 0x011A
 142:	08 95       	ret

00000144 <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void) {
    ledm_call_count++;
 144:	80 91 0c 01 	lds	r24, 0x010C
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 0c 01 	sts	0x010C, r24
}
 14e:	08 95       	ret

00000150 <WDGDrv_Init>:
#define WDP1        1  // Watchdog Timer Prescaler 1
volatile uint16 timer_counter = 0;


static inline void disable_interrupt() {
    SREG &= ~(1 << SREG_I);
 150:	af e5       	ldi	r26, 0x5F	; 95
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	8c 91       	ld	r24, X
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	8c 93       	st	X, r24


void WDGDrv_Init(void)
{
	disable_interrupt();
	MCUSR &= ~(1<<WDRF);
 15a:	e4 e5       	ldi	r30, 0x54	; 84
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	87 7f       	andi	r24, 0xF7	; 247
 162:	80 83       	st	Z, r24
	wdt_reset();
 164:	a8 95       	wdr
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 166:	e0 e6       	ldi	r30, 0x60	; 96
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 61       	ori	r24, 0x18	; 24
 16e:	80 83       	st	Z, r24
	/* Set new prescaler(time-out) value = 64ms*/
	WDTCSR = (1<<WDE) | (1<<WDP1);
 170:	8a e0       	ldi	r24, 0x0A	; 10
 172:	80 83       	st	Z, r24
    SREG &= ~(1 << SREG_I);
}

// Enable global interrupts
static inline void enable_interrupt() {
    SREG |= (1 << SREG_I);
 174:	8c 91       	ld	r24, X
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8c 93       	st	X, r24
	wdt_reset();
	WDTCSR |= (1<<WDCE) | (1<<WDE);
	/* Set new prescaler(time-out) value = 64ms*/
	WDTCSR = (1<<WDE) | (1<<WDP1);
	enable_interrupt();
}
 17a:	08 95       	ret

0000017c <WDGDrv_IsrNotification>:




void WDGDrv_IsrNotification(void) {
	timer_counter += 50;
 17c:	80 91 0f 01 	lds	r24, 0x010F
 180:	90 91 10 01 	lds	r25, 0x0110
 184:	c2 96       	adiw	r24, 0x32	; 50
 186:	90 93 10 01 	sts	0x0110, r25
 18a:	80 93 0f 01 	sts	0x010F, r24

	    if (timer_counter % 100 != 0 ) {
 18e:	80 91 0f 01 	lds	r24, 0x010F
 192:	90 91 10 01 	lds	r25, 0x0110
 196:	64 e6       	ldi	r22, 0x64	; 100
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 05 02 	call	0x40a	; 0x40a <__udivmodhi4>
 19e:	89 2b       	or	r24, r25
 1a0:	61 f0       	breq	.+24     	; 0x1ba <WDGDrv_IsrNotification+0x3e>
	        // After 50ms, check if WDGM_MainFunction has been executed
	        //wdgm_mainfunction_executed = true => not stuck
	    	if (!wdgm_mainfunction_executed) {
 1a2:	80 91 19 01 	lds	r24, 0x0119
 1a6:	88 23       	and	r24, r24
 1a8:	11 f4       	brne	.+4      	; 0x1ae <WDGDrv_IsrNotification+0x32>
	    		//refresh because the main function is not stuck
	    		wdt_reset();
 1aa:	a8 95       	wdr
 1ac:	08 95       	ret
	        }
	        else{
	        	//if main function is stuck
	        	wdgm_mainfunction_executed = 0;
 1ae:	10 92 19 01 	sts	0x0119, r1
				status = NOK;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 1a 01 	sts	0x011A, r24
 1b8:	08 95       	ret
	        }
	    } else if (timer_counter % 100 == 0) {
 1ba:	80 91 0f 01 	lds	r24, 0x010F
 1be:	90 91 10 01 	lds	r25, 0x0110
 1c2:	64 e6       	ldi	r22, 0x64	; 100
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	0e 94 05 02 	call	0x40a	; 0x40a <__udivmodhi4>
 1ca:	89 2b       	or	r24, r25
 1cc:	91 f4       	brne	.+36     	; 0x1f2 <WDGDrv_IsrNotification+0x76>
	        // After 100ms, check the two conditions
	        if (wdgm_mainfunction_executed && (WDGM_PovideSuppervisionStatus() == OK)) {
 1ce:	80 91 19 01 	lds	r24, 0x0119
 1d2:	88 23       	and	r24, r24
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <WDGDrv_IsrNotification+0x64>
 1d6:	0e 94 9f 00 	call	0x13e	; 0x13e <WDGM_PovideSuppervisionStatus>
 1da:	88 23       	and	r24, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <WDGDrv_IsrNotification+0x64>
	            wdt_reset(); // Refresh the watchdog timer
 1de:	a8 95       	wdr
	        }
	        // Reset flags and counter for the next period
	        wdgm_mainfunction_executed = 0;
 1e0:	10 92 19 01 	sts	0x0119, r1
	        status = NOK;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 1a 01 	sts	0x011A, r24
	        timer_counter = 0;
 1ea:	10 92 10 01 	sts	0x0110, r1
 1ee:	10 92 0f 01 	sts	0x010F, r1
 1f2:	08 95       	ret

000001f4 <Timer_Init>:



void Timer_Init(void) {
    // Initialize counter to zero
    TCNT1L = 0;
 1f4:	10 92 84 00 	sts	0x0084, r1
    TCNT1H = 0;
 1f8:	10 92 85 00 	sts	0x0085, r1

    // Set Timer1 to CTC mode
    TCCR1B |= (1 << WGM12);
 1fc:	a1 e8       	ldi	r26, 0x81	; 129
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	8c 91       	ld	r24, X
 202:	88 60       	ori	r24, 0x08	; 8
 204:	8c 93       	st	X, r24

    // Set OCR1A to 49 for 50ms interval with 1024 prescaler
    OCR1A = 49;
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	90 93 89 00 	sts	0x0089, r25
 20e:	80 93 88 00 	sts	0x0088, r24

    // Enable compare interrupt
    TIMSK1 |= (1 << OCIE1A);
 212:	ef e6       	ldi	r30, 0x6F	; 111
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24

    // Start timer with 1024 prescaler
    TCCR1B |= (1 << CS12) | (1 << CS10);
 21c:	8c 91       	ld	r24, X
 21e:	85 60       	ori	r24, 0x05	; 5
 220:	8c 93       	st	X, r24
}
 222:	08 95       	ret

00000224 <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 246:	0e 94 be 00 	call	0x17c	; 0x17c <WDGDrv_IsrNotification>
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <LED_Init>:
static uint32 led_state = 0;
static uint32 counter = 0;
void LED_Init() {

//	Gpio_Init();
	led_state = 0;
 26c:	10 92 15 01 	sts	0x0115, r1
 270:	10 92 16 01 	sts	0x0116, r1
 274:	10 92 17 01 	sts	0x0117, r1
 278:	10 92 18 01 	sts	0x0118, r1
}
 27c:	08 95       	ret

0000027e <Delay>:
}



// Simulated delay function
void Delay(uint32 ms){
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	00 d0       	rcall	.+0      	; 0x284 <Delay+0x6>
 284:	00 d0       	rcall	.+0      	; 0x286 <Delay+0x8>
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	volatile uint32 i;
	for (i = 0; i < ms * 1000; i++) {
 28a:	19 82       	std	Y+1, r1	; 0x01
 28c:	1a 82       	std	Y+2, r1	; 0x02
 28e:	1b 82       	std	Y+3, r1	; 0x03
 290:	1c 82       	std	Y+4, r1	; 0x04
 292:	28 ee       	ldi	r18, 0xE8	; 232
 294:	33 e0       	ldi	r19, 0x03	; 3
 296:	40 e0       	ldi	r20, 0x00	; 0
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__mulsi3>
 29e:	9b 01       	movw	r18, r22
 2a0:	ac 01       	movw	r20, r24
 2a2:	89 81       	ldd	r24, Y+1	; 0x01
 2a4:	9a 81       	ldd	r25, Y+2	; 0x02
 2a6:	ab 81       	ldd	r26, Y+3	; 0x03
 2a8:	bc 81       	ldd	r27, Y+4	; 0x04
 2aa:	82 17       	cp	r24, r18
 2ac:	93 07       	cpc	r25, r19
 2ae:	a4 07       	cpc	r26, r20
 2b0:	b5 07       	cpc	r27, r21
 2b2:	a0 f4       	brcc	.+40     	; 0x2dc <Delay+0x5e>
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	ab 81       	ldd	r26, Y+3	; 0x03
 2ba:	bc 81       	ldd	r27, Y+4	; 0x04
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	a1 1d       	adc	r26, r1
 2c0:	b1 1d       	adc	r27, r1
 2c2:	89 83       	std	Y+1, r24	; 0x01
 2c4:	9a 83       	std	Y+2, r25	; 0x02
 2c6:	ab 83       	std	Y+3, r26	; 0x03
 2c8:	bc 83       	std	Y+4, r27	; 0x04
 2ca:	89 81       	ldd	r24, Y+1	; 0x01
 2cc:	9a 81       	ldd	r25, Y+2	; 0x02
 2ce:	ab 81       	ldd	r26, Y+3	; 0x03
 2d0:	bc 81       	ldd	r27, Y+4	; 0x04
 2d2:	82 17       	cp	r24, r18
 2d4:	93 07       	cpc	r25, r19
 2d6:	a4 07       	cpc	r26, r20
 2d8:	b5 07       	cpc	r27, r21
 2da:	60 f3       	brcs	.-40     	; 0x2b4 <Delay+0x36>

	}
}
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	cf 91       	pop	r28
 2e6:	df 91       	pop	r29
 2e8:	08 95       	ret

000002ea <LED_Manage>:
}

void LED_Manage(void) {

    //Gpio_Write(1, 1);
    counter += 10;
 2ea:	80 91 11 01 	lds	r24, 0x0111
 2ee:	90 91 12 01 	lds	r25, 0x0112
 2f2:	a0 91 13 01 	lds	r26, 0x0113
 2f6:	b0 91 14 01 	lds	r27, 0x0114
 2fa:	0a 96       	adiw	r24, 0x0a	; 10
 2fc:	a1 1d       	adc	r26, r1
 2fe:	b1 1d       	adc	r27, r1
 300:	80 93 11 01 	sts	0x0111, r24
 304:	90 93 12 01 	sts	0x0112, r25
 308:	a0 93 13 01 	sts	0x0113, r26
 30c:	b0 93 14 01 	sts	0x0114, r27
    if (counter >= 500) {
 310:	84 5f       	subi	r24, 0xF4	; 244
 312:	91 40       	sbci	r25, 0x01	; 1
 314:	a0 40       	sbci	r26, 0x00	; 0
 316:	b0 40       	sbci	r27, 0x00	; 0
 318:	40 f1       	brcs	.+80     	; 0x36a <LED_Manage+0x80>
        led_state = !led_state;
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	80 91 15 01 	lds	r24, 0x0115
 326:	90 91 16 01 	lds	r25, 0x0116
 32a:	a0 91 17 01 	lds	r26, 0x0117
 32e:	b0 91 18 01 	lds	r27, 0x0118
 332:	00 97       	sbiw	r24, 0x00	; 0
 334:	a1 05       	cpc	r26, r1
 336:	b1 05       	cpc	r27, r1
 338:	21 f4       	brne	.+8      	; 0x342 <LED_Manage+0x58>
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	20 93 15 01 	sts	0x0115, r18
 346:	30 93 16 01 	sts	0x0116, r19
 34a:	40 93 17 01 	sts	0x0117, r20
 34e:	50 93 18 01 	sts	0x0118, r21
        Gpio_Write(PinNum, led_state);
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	62 2f       	mov	r22, r18
 356:	0e 94 c0 01 	call	0x380	; 0x380 <Gpio_Write>
        counter = 0;
 35a:	10 92 11 01 	sts	0x0111, r1
 35e:	10 92 12 01 	sts	0x0112, r1
 362:	10 92 13 01 	sts	0x0113, r1
 366:	10 92 14 01 	sts	0x0114, r1
    }

    WDGM_AlivenessIndication();
 36a:	0e 94 a2 00 	call	0x144	; 0x144 <WDGM_AlivenessIndication>
    //Gpio_Write(1, 0);
}
 36e:	08 95       	ret

00000370 <Gpio_Init>:
#define GPIO_REG(REG_ID, PORT_ID) ((uint32*)((PORT_ID) + (REG_ID)))

void Gpio_Init() {
	//	uint8 PortId = 0;

	GpioType * gpioReg =  GPIO_Addresses[CURRENT_PORT - 'B'];
 370:	e0 91 04 01 	lds	r30, 0x0104
 374:	f0 91 05 01 	lds	r31, 0x0105
	gpioReg->GPIO_DDRx |= (0x01<<PinNum1);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum2);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum3);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum4);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum5);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum6);
 378:	81 81       	ldd	r24, Z+1	; 0x01
 37a:	8f 67       	ori	r24, 0x7F	; 127
 37c:	81 83       	std	Z+1, r24	; 0x01


}
 37e:	08 95       	ret

00000380 <Gpio_Write>:

void Gpio_Write(unsigned char PinId, unsigned char PinData) {

//	uint8 PortId = 0;

	GpioType * gpioReg =  GPIO_Addresses[CURRENT_PORT - 'B'];
 380:	e0 91 04 01 	lds	r30, 0x0104
 384:	f0 91 05 01 	lds	r31, 0x0105

	//check DDxn = 1 meaning this is an output pin
	//READ_BIT(X, BIT) => (((X) >> (BIT)) & 1)
	if (READ_BIT(gpioReg->GPIO_DDRx, PinId) && (PinData < 2)){
 388:	48 2f       	mov	r20, r24
 38a:	81 81       	ldd	r24, Z+1	; 0x01
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	04 2e       	mov	r0, r20
 390:	02 c0       	rjmp	.+4      	; 0x396 <Gpio_Write+0x16>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	0a 94       	dec	r0
 398:	e2 f7       	brpl	.-8      	; 0x392 <Gpio_Write+0x12>
 39a:	80 ff       	sbrs	r24, 0
 39c:	16 c0       	rjmp	.+44     	; 0x3ca <Gpio_Write+0x4a>
 39e:	62 30       	cpi	r22, 0x02	; 2
 3a0:	a0 f4       	brcc	.+40     	; 0x3ca <Gpio_Write+0x4a>
		gpioReg->GPIO_PORTx &= ~(0x01<<PinId);
		gpioReg->GPIO_PORTx |= (PinData << PinId);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	04 2e       	mov	r0, r20
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <Gpio_Write+0x2e>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <Gpio_Write+0x2a>
 3b2:	80 95       	com	r24
 3b4:	22 81       	ldd	r18, Z+2	; 0x02
 3b6:	82 23       	and	r24, r18
 3b8:	26 2f       	mov	r18, r22
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <Gpio_Write+0x42>
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	4a 95       	dec	r20
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <Gpio_Write+0x3e>
 3c6:	82 2b       	or	r24, r18
 3c8:	82 83       	std	Z+2, r24	; 0x02
 3ca:	08 95       	ret

000003cc <__mulsi3>:
 3cc:	62 9f       	mul	r22, r18
 3ce:	d0 01       	movw	r26, r0
 3d0:	73 9f       	mul	r23, r19
 3d2:	f0 01       	movw	r30, r0
 3d4:	82 9f       	mul	r24, r18
 3d6:	e0 0d       	add	r30, r0
 3d8:	f1 1d       	adc	r31, r1
 3da:	64 9f       	mul	r22, r20
 3dc:	e0 0d       	add	r30, r0
 3de:	f1 1d       	adc	r31, r1
 3e0:	92 9f       	mul	r25, r18
 3e2:	f0 0d       	add	r31, r0
 3e4:	83 9f       	mul	r24, r19
 3e6:	f0 0d       	add	r31, r0
 3e8:	74 9f       	mul	r23, r20
 3ea:	f0 0d       	add	r31, r0
 3ec:	65 9f       	mul	r22, r21
 3ee:	f0 0d       	add	r31, r0
 3f0:	99 27       	eor	r25, r25
 3f2:	72 9f       	mul	r23, r18
 3f4:	b0 0d       	add	r27, r0
 3f6:	e1 1d       	adc	r30, r1
 3f8:	f9 1f       	adc	r31, r25
 3fa:	63 9f       	mul	r22, r19
 3fc:	b0 0d       	add	r27, r0
 3fe:	e1 1d       	adc	r30, r1
 400:	f9 1f       	adc	r31, r25
 402:	bd 01       	movw	r22, r26
 404:	cf 01       	movw	r24, r30
 406:	11 24       	eor	r1, r1
 408:	08 95       	ret

0000040a <__udivmodhi4>:
 40a:	aa 1b       	sub	r26, r26
 40c:	bb 1b       	sub	r27, r27
 40e:	51 e1       	ldi	r21, 0x11	; 17
 410:	07 c0       	rjmp	.+14     	; 0x420 <__udivmodhi4_ep>

00000412 <__udivmodhi4_loop>:
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	a6 17       	cp	r26, r22
 418:	b7 07       	cpc	r27, r23
 41a:	10 f0       	brcs	.+4      	; 0x420 <__udivmodhi4_ep>
 41c:	a6 1b       	sub	r26, r22
 41e:	b7 0b       	sbc	r27, r23

00000420 <__udivmodhi4_ep>:
 420:	88 1f       	adc	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	5a 95       	dec	r21
 426:	a9 f7       	brne	.-22     	; 0x412 <__udivmodhi4_loop>
 428:	80 95       	com	r24
 42a:	90 95       	com	r25
 42c:	bc 01       	movw	r22, r24
 42e:	cd 01       	movw	r24, r26
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
