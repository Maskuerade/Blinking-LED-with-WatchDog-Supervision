
WDG_Project_mc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080010c  0080010c  00000476  2**0
                  ALLOC
  3 .stab         00001a4c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001309  00000000  00000000  00001ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000030  00000000  00000000  000031cd  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003200  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00003834  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  00003dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  00003df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>


int main() {

	Gpio_Init();
  a6:	0e 94 ad 01 	call	0x35a	; 0x35a <Gpio_Init>
	LED_Init();
  aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LED_Init>

	Gpio_Write(5, 1);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	0e 94 b5 01 	call	0x36a	; 0x36a <Gpio_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	8d e0       	ldi	r24, 0x0D	; 13
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x16>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x20>
  c6:	00 00       	nop
	_delay_ms(1000);
	Gpio_Write(5, 0);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	0e 94 b5 01 	call	0x36a	; 0x36a <Gpio_Write>

	Timer_Init();
  d0:	0e 94 27 01 	call	0x24e	; 0x24e <Timer_Init>
	WDGDrv_Init();
  d4:	0e 94 b4 00 	call	0x168	; 0x168 <WDGDrv_Init>
	WDGM_Init();
  d8:	0e 94 81 00 	call	0x102	; 0x102 <WDGM_Init>
  dc:	83 ec       	ldi	r24, 0xC3	; 195
  de:	99 e0       	ldi	r25, 0x09	; 9
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x3a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x40>
  e6:	00 00       	nop
	unsigned int wdgm_counter = 0;


	while (1) {
		_delay_ms(10);
		LED_Manage();
  e8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_Manage>
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x4a>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x50>
  f6:	00 00       	nop
  f8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_Manage>


		wdgm_counter += 10;
		if (wdgm_counter >= 20) {
			wdgm_counter = 0;
			WDGM_MainFunction();
  fc:	0e 94 89 00 	call	0x112	; 0x112 <WDGM_MainFunction>
 100:	ed cf       	rjmp	.-38     	; 0xdc <main+0x36>

00000102 <WDGM_Init>:
volatile uint8 wdgm_mainfunction_executed;// = 0;



void WDGM_Init(void) {
    ledm_call_count = 0;
 102:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledm_call_count>
    status = NOK;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <status>
    wdgm_mainfunction_executed = 0;
 10c:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <wdgm_mainfunction_executed>
}
 110:	08 95       	ret

00000112 <WDGM_MainFunction>:

void WDGM_MainFunction(void) {
//	static unsigned int check_counter = 0;
	//Gpio_Write(2, 1);

    check_counter += 20; // Called every 20ms
 112:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 116:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <__data_end+0x1>
 11a:	44 96       	adiw	r24, 0x14	; 20

    if (check_counter >= 100) { // 100ms period
 11c:	84 36       	cpi	r24, 0x64	; 100
 11e:	91 05       	cpc	r25, r1
 120:	88 f0       	brcs	.+34     	; 0x144 <WDGM_MainFunction+0x32>
    	check_counter = 0;
 122:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <__data_end+0x1>
 126:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
        if (ledm_call_count >= 8 && ledm_call_count <= 12) {
 12a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ledm_call_count>
 12e:	88 50       	subi	r24, 0x08	; 8
 130:	85 30       	cpi	r24, 0x05	; 5
 132:	68 f4       	brcc	.+26     	; 0x14e <WDGM_MainFunction+0x3c>
            status = OK;
 134:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <status>
        } else {
            status = NOK;
        }
        // set the wdgm_mainfunction_executed with 1 bec it is not stuck
        wdgm_mainfunction_executed = 1;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <wdgm_mainfunction_executed>
        ledm_call_count = 0;
 13e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <ledm_call_count>

    }

    //Gpio_Write(2, 0);

}
 142:	08 95       	ret

void WDGM_MainFunction(void) {
//	static unsigned int check_counter = 0;
	//Gpio_Write(2, 1);

    check_counter += 20; // Called every 20ms
 144:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_end+0x1>
 148:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 14c:	08 95       	ret
    if (check_counter >= 100) { // 100ms period
    	check_counter = 0;
        if (ledm_call_count >= 8 && ledm_call_count <= 12) {
            status = OK;
        } else {
            status = NOK;
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <status>
 154:	f1 cf       	rjmp	.-30     	; 0x138 <WDGM_MainFunction+0x26>

00000156 <WDGM_PovideSuppervisionStatus>:



WDGM_StatusType WDGM_PovideSuppervisionStatus(void) {
	return status;
}
 156:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <status>
 15a:	08 95       	ret

0000015c <WDGM_AlivenessIndication>:

void WDGM_AlivenessIndication(void) {
    ledm_call_count++;
 15c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ledm_call_count>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <ledm_call_count>
}
 166:	08 95       	ret

00000168 <WDGDrv_Init>:
#define MCUSR  (*(volatile uint8*)(0x55))
#define WDTCSR  (*(volatile uint8*)(0x60))


static inline void disable_interrupt() {
    SREG &= ~(1 << SREG_I);
 168:	8f b7       	in	r24, 0x3f	; 63
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	8f bf       	out	0x3f, r24	; 63


void WDGDrv_Init(void)
{
	disable_interrupt();
	MCUSR &= ~(1<<WDRF);
 16e:	85 b7       	in	r24, 0x35	; 53
 170:	87 7f       	andi	r24, 0xF7	; 247
 172:	85 bf       	out	0x35, r24	; 53
	wdt_reset();
 174:	a8 95       	wdr
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 176:	e0 e6       	ldi	r30, 0x60	; 96
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 61       	ori	r24, 0x18	; 24
 17e:	80 83       	st	Z, r24
	/* Set new prescaler(time-out) value = 64ms*/
	WDTCSR = (1<<WDE) | (1<<WDP1);
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	80 83       	st	Z, r24
    SREG &= ~(1 << SREG_I);
}

// Enable global interrupts
static inline void enable_interrupt() {
    SREG |= (1 << SREG_I);
 184:	8f b7       	in	r24, 0x3f	; 63
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8f bf       	out	0x3f, r24	; 63
	wdt_reset();
	WDTCSR |= (1<<WDCE) | (1<<WDE);
	/* Set new prescaler(time-out) value = 64ms*/
	WDTCSR = (1<<WDE) | (1<<WDP1);
	enable_interrupt();
}
 18a:	08 95       	ret

0000018c <WDGDrv_IsrNotification>:




void WDGDrv_IsrNotification(void) {
	Gpio_Write(3, 1);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	0e 94 b5 01 	call	0x36a	; 0x36a <Gpio_Write>
	timer_counter += 50;
 194:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <timer_counter>
 198:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <timer_counter+0x1>
 19c:	c2 96       	adiw	r24, 0x32	; 50
 19e:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <timer_counter+0x1>
 1a2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <timer_counter>

	    if (timer_counter % 100 != 0 ) {
 1a6:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <timer_counter>
 1aa:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <timer_counter+0x1>
 1ae:	9a 01       	movw	r18, r20
 1b0:	36 95       	lsr	r19
 1b2:	27 95       	ror	r18
 1b4:	36 95       	lsr	r19
 1b6:	27 95       	ror	r18
 1b8:	ab e7       	ldi	r26, 0x7B	; 123
 1ba:	b4 e1       	ldi	r27, 0x14	; 20
 1bc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__umulhisi3>
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	64 e6       	ldi	r22, 0x64	; 100
 1c6:	68 9f       	mul	r22, r24
 1c8:	90 01       	movw	r18, r0
 1ca:	69 9f       	mul	r22, r25
 1cc:	30 0d       	add	r19, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	42 17       	cp	r20, r18
 1d2:	53 07       	cpc	r21, r19
 1d4:	61 f0       	breq	.+24     	; 0x1ee <WDGDrv_IsrNotification+0x62>
	        // After 50ms, check if WDGM_MainFunction has been executed
	        //wdgm_mainfunction_executed = true => not stuck
	    	if (!wdgm_mainfunction_executed) {
 1d6:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <wdgm_mainfunction_executed>
 1da:	81 11       	cpse	r24, r1
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <WDGDrv_IsrNotification+0x56>
	    		//refresh because the main function is not stuck
	    		wdt_reset();
 1de:	a8 95       	wdr
 1e0:	2b c0       	rjmp	.+86     	; 0x238 <WDGDrv_IsrNotification+0xac>
	        }
	        else{
	        	//if main function is stuck
	        	wdgm_mainfunction_executed = 0;
 1e2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <wdgm_mainfunction_executed>
				status = NOK;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <status>
 1ec:	25 c0       	rjmp	.+74     	; 0x238 <WDGDrv_IsrNotification+0xac>
	        }
	    } else if (timer_counter % 100 == 0) {
 1ee:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <timer_counter>
 1f2:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <timer_counter+0x1>
 1f6:	9a 01       	movw	r18, r20
 1f8:	36 95       	lsr	r19
 1fa:	27 95       	ror	r18
 1fc:	36 95       	lsr	r19
 1fe:	27 95       	ror	r18
 200:	ab e7       	ldi	r26, 0x7B	; 123
 202:	b4 e1       	ldi	r27, 0x14	; 20
 204:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__umulhisi3>
 208:	96 95       	lsr	r25
 20a:	87 95       	ror	r24
 20c:	64 e6       	ldi	r22, 0x64	; 100
 20e:	68 9f       	mul	r22, r24
 210:	90 01       	movw	r18, r0
 212:	69 9f       	mul	r22, r25
 214:	30 0d       	add	r19, r0
 216:	11 24       	eor	r1, r1
 218:	42 17       	cp	r20, r18
 21a:	53 07       	cpc	r21, r19
 21c:	69 f4       	brne	.+26     	; 0x238 <WDGDrv_IsrNotification+0xac>
	        // After 100ms, check the two conditions
	        if (wdgm_mainfunction_executed && (WDGM_PovideSuppervisionStatus() == OK)) {
 21e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <wdgm_mainfunction_executed>
 222:	81 11       	cpse	r24, r1
 224:	0e c0       	rjmp	.+28     	; 0x242 <WDGDrv_IsrNotification+0xb6>
	            wdt_reset(); // Refresh the watchdog timer
	        }
	        // Reset flags and counter for the next period
	        wdgm_mainfunction_executed = 0;
 226:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <wdgm_mainfunction_executed>
	        status = NOK;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <status>
	        timer_counter = 0;
 230:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <timer_counter+0x1>
 234:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <timer_counter>
	    }
	    Gpio_Write(3, 0);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 b5 01 	call	0x36a	; 0x36a <Gpio_Write>

}
 240:	08 95       	ret
	        	wdgm_mainfunction_executed = 0;
				status = NOK;
	        }
	    } else if (timer_counter % 100 == 0) {
	        // After 100ms, check the two conditions
	        if (wdgm_mainfunction_executed && (WDGM_PovideSuppervisionStatus() == OK)) {
 242:	0e 94 ab 00 	call	0x156	; 0x156 <WDGM_PovideSuppervisionStatus>
 246:	81 11       	cpse	r24, r1
 248:	ee cf       	rjmp	.-36     	; 0x226 <WDGDrv_IsrNotification+0x9a>
	            wdt_reset(); // Refresh the watchdog timer
 24a:	a8 95       	wdr
 24c:	ec cf       	rjmp	.-40     	; 0x226 <WDGDrv_IsrNotification+0x9a>

0000024e <Timer_Init>:



void Timer_Init(void) {
    // Initialize counter to zero
    TCNT1L = 0;
 24e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
    TCNT1H = 0;
 252:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>

    // Set Timer1 to CTC mode
    TCCR1B |= (1 << WGM12);
 256:	e1 e8       	ldi	r30, 0x81	; 129
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	80 83       	st	Z, r24

    // Set OCR1A to 49 for 50ms interval with 1024 prescaler
    OCR1A = 49;
 260:	81 e3       	ldi	r24, 0x31	; 49
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 268:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

    // Enable compare interrupt
    TIMSK1 |= (1 << OCIE1A);
 26c:	af e6       	ldi	r26, 0x6F	; 111
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	8c 91       	ld	r24, X
 272:	82 60       	ori	r24, 0x02	; 2
 274:	8c 93       	st	X, r24

    // Start timer with 1024 prescaler
    TCCR1B |= (1 << CS12) | (1 << CS10);
 276:	80 81       	ld	r24, Z
 278:	85 60       	ori	r24, 0x05	; 5
 27a:	80 83       	st	Z, r24
}
 27c:	08 95       	ret

0000027e <__vector_11>:

ISR(TIMER1_COMPA_vect) {
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
    WDGDrv_IsrNotification();
 2a0:	0e 94 c6 00 	call	0x18c	; 0x18c <WDGDrv_IsrNotification>
}
 2a4:	ff 91       	pop	r31
 2a6:	ef 91       	pop	r30
 2a8:	bf 91       	pop	r27
 2aa:	af 91       	pop	r26
 2ac:	9f 91       	pop	r25
 2ae:	8f 91       	pop	r24
 2b0:	7f 91       	pop	r23
 2b2:	6f 91       	pop	r22
 2b4:	5f 91       	pop	r21
 2b6:	4f 91       	pop	r20
 2b8:	3f 91       	pop	r19
 2ba:	2f 91       	pop	r18
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <LED_Init>:
static uint32 led_state = 0;
static uint32 counter = 0;
void LED_Init() {

//	Gpio_Init();
	led_state = 0;
 2c6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <led_state>
 2ca:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <led_state+0x1>
 2ce:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <led_state+0x2>
 2d2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <led_state+0x3>
}
 2d6:	08 95       	ret

000002d8 <LED_Manage>:

void LED_Manage(void) {

    //Gpio_Write(1, 1);
    counter += 10;
 2d8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <counter>
 2dc:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <counter+0x1>
 2e0:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <counter+0x2>
 2e4:	b0 91 14 01 	lds	r27, 0x0114	; 0x800114 <counter+0x3>
 2e8:	0a 96       	adiw	r24, 0x0a	; 10
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <counter>
 2f2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <counter+0x1>
 2f6:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <counter+0x2>
 2fa:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <counter+0x3>
    if (counter >= 500) {
 2fe:	84 3f       	cpi	r24, 0xF4	; 244
 300:	91 40       	sbci	r25, 0x01	; 1
 302:	a1 05       	cpc	r26, r1
 304:	b1 05       	cpc	r27, r1
 306:	18 f4       	brcc	.+6      	; 0x30e <LED_Manage+0x36>
        led_state = !led_state;
        Gpio_Write(PinNum, led_state);
        counter = 0;
    }

    WDGM_AlivenessIndication();
 308:	0e 94 ae 00 	call	0x15c	; 0x15c <WDGM_AlivenessIndication>
    //Gpio_Write(1, 0);
}
 30c:	08 95       	ret
void LED_Manage(void) {

    //Gpio_Write(1, 1);
    counter += 10;
    if (counter >= 500) {
        led_state = !led_state;
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <led_state>
 314:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <led_state+0x1>
 318:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <led_state+0x2>
 31c:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <led_state+0x3>
 320:	89 2b       	or	r24, r25
 322:	8a 2b       	or	r24, r26
 324:	8b 2b       	or	r24, r27
 326:	09 f0       	breq	.+2      	; 0x32a <LED_Manage+0x52>
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	86 2f       	mov	r24, r22
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	a0 e0       	ldi	r26, 0x00	; 0
 332:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <led_state>
 336:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <led_state+0x1>
 33a:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <led_state+0x2>
 33e:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <led_state+0x3>
        Gpio_Write(PinNum, led_state);
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	0e 94 b5 01 	call	0x36a	; 0x36a <Gpio_Write>
        counter = 0;
 348:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <counter>
 34c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <counter+0x1>
 350:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <counter+0x2>
 354:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <counter+0x3>
 358:	d7 cf       	rjmp	.-82     	; 0x308 <LED_Manage+0x30>

0000035a <Gpio_Init>:
#define GPIO_REG(REG_ID, PORT_ID) ((uint32*)((PORT_ID) + (REG_ID)))

void Gpio_Init() {
	//	uint8 PortId = 0;

	GpioType * gpioReg =  GPIO_Addresses[CURRENT_PORT - 'B'];
 35a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 35e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
	gpioReg->GPIO_DDRx |= (0x01<<PinNum1);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum2);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum3);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum4);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum5);
	gpioReg->GPIO_DDRx |= (0x01<<PinNum6);
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	8f 67       	ori	r24, 0x7F	; 127
 366:	81 83       	std	Z+1, r24	; 0x01


}
 368:	08 95       	ret

0000036a <Gpio_Write>:

void Gpio_Write(unsigned char PinId, unsigned char PinData) {

//	uint8 PortId = 0;

	GpioType * gpioReg =  GPIO_Addresses[CURRENT_PORT - 'B'];
 36a:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 36e:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>

	//check DDxn = 1 meaning this is an output pin
	//READ_BIT(X, BIT) => (((X) >> (BIT)) & 1)
	if (READ_BIT(gpioReg->GPIO_DDRx, PinId) && (PinData < 2)){
 372:	21 81       	ldd	r18, Z+1	; 0x01
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	08 2e       	mov	r0, r24
 378:	02 c0       	rjmp	.+4      	; 0x37e <Gpio_Write+0x14>
 37a:	35 95       	asr	r19
 37c:	27 95       	ror	r18
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <Gpio_Write+0x10>
 382:	20 ff       	sbrs	r18, 0
 384:	02 c0       	rjmp	.+4      	; 0x38a <Gpio_Write+0x20>
 386:	62 30       	cpi	r22, 0x02	; 2
 388:	08 f0       	brcs	.+2      	; 0x38c <Gpio_Write+0x22>
		gpioReg->GPIO_PORTx &= ~(0x01<<PinId);
		gpioReg->GPIO_PORTx |= (PinData << PinId);
	}

}
 38a:	08 95       	ret
	GpioType * gpioReg =  GPIO_Addresses[CURRENT_PORT - 'B'];

	//check DDxn = 1 meaning this is an output pin
	//READ_BIT(X, BIT) => (((X) >> (BIT)) & 1)
	if (READ_BIT(gpioReg->GPIO_DDRx, PinId) && (PinData < 2)){
		gpioReg->GPIO_PORTx &= ~(0x01<<PinId);
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	08 2e       	mov	r0, r24
 392:	02 c0       	rjmp	.+4      	; 0x398 <Gpio_Write+0x2e>
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	0a 94       	dec	r0
 39a:	e2 f7       	brpl	.-8      	; 0x394 <Gpio_Write+0x2a>
 39c:	20 95       	com	r18
 39e:	92 81       	ldd	r25, Z+2	; 0x02
 3a0:	29 23       	and	r18, r25
		gpioReg->GPIO_PORTx |= (PinData << PinId);
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <Gpio_Write+0x40>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <Gpio_Write+0x3c>
 3ae:	62 2b       	or	r22, r18
 3b0:	62 83       	std	Z+2, r22	; 0x02
	}

}
 3b2:	eb cf       	rjmp	.-42     	; 0x38a <Gpio_Write+0x20>

000003b4 <__umulhisi3>:
 3b4:	a2 9f       	mul	r26, r18
 3b6:	b0 01       	movw	r22, r0
 3b8:	b3 9f       	mul	r27, r19
 3ba:	c0 01       	movw	r24, r0
 3bc:	a3 9f       	mul	r26, r19
 3be:	70 0d       	add	r23, r0
 3c0:	81 1d       	adc	r24, r1
 3c2:	11 24       	eor	r1, r1
 3c4:	91 1d       	adc	r25, r1
 3c6:	b2 9f       	mul	r27, r18
 3c8:	70 0d       	add	r23, r0
 3ca:	81 1d       	adc	r24, r1
 3cc:	11 24       	eor	r1, r1
 3ce:	91 1d       	adc	r25, r1
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
